# -*- coding: utf-8 -*-
"""Profissao Cientista de Dados M18 Pratique.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NvWy-9_rqHXFxaprvKw4uIWZnBQJH4Fo

# **MÓDULO 18 - Pratique**
# Regressão Linear

Agora que aprendemos como aplicar a regressão linear simples e múltipla, colocaremos em prática os conceitos vistos na aula.

Temos aqui uma base de imóveis para alugar, precisamos desenvolver um modelo de regressão linear múltipla para conseguir prever o preço de imóveis dadas as variáveis independentes do nosso modelo.

**Atenção! Esse é seu primeiro modelo, caso tenha dificuldade conte com a ajuda da tutoria**

Você notará que alguns códigos já estão presentes para facilitar a construção de vocês.
"""

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

df = pd.read_csv("ALUGUEL_MOD12.csv", delimiter=';')

df.head(10)

"""Legenda dos dados:

*   **Valor_Aluguel** : valor Total pago no aluguel

*   **Valor_Condominio** : Valor do Condomínio.

*   **Metragem** : Metragem do Apartamento.

*   **N_Quartos** : Número de Quartos do Imóvel.

*   **N_banheiros** : Número de banheiros.

*   **N_Suites** : Número de Suítes.

*   **N_Vagas** : Número de Vagas.

# 1 - Realize a primeira etapa de pré processamento dos dados.

A) Verifique os tipos de dados.


B) Verifique os dados faltantes, se houver dados faltantes faça a substituição ou remoção justificando sua escolha.
"""

# Carregar o dataset
df = pd.read_csv("ALUGUEL_MOD12.csv", delimiter=';')

# 1A) Verificar os tipos de dados
print("Tipos de dados:\n", df.dtypes)

# 1B) Verificar dados faltantes
print("\nDados faltantes:\n", df.isnull().sum())

# Se houver dados faltantes, vamos lidar com eles
# Vamos substituir os valores faltantes por 0 ou pela média/mediana, dependendo da coluna

# Substituir valores faltantes em 'Valor_Condominio' e outras variáveis numéricas pela média (exemplo)
df['Valor_Condominio'] = df['Valor_Condominio'].fillna(df['Valor_Condominio'].mean())

# Se houver mais variáveis com dados faltantes, podemos substituir da mesma forma
df['Metragem'] = df['Metragem'].fillna(df['Metragem'].mean())  # Exemplo

# Outra forma de lidar com dados faltantes seria remover as linhas, mas isso pode ser prejudicial, então vamos optar por substituir.
# df.dropna(inplace=True)  # Isso removeria as linhas com dados faltantes

# Verificar novamente após as alterações
print("\nDados após tratamento:\n", df.isnull().sum())

"""# 2 - Realize a segunda etapa de pré processamento dos dados.

A) Utilize a função describe para identificarmos outliers e verificarmos a distribuição dos dados.


B) Caso note uma variável que te pareça conter outliers realiza a análise e tratamento desses dados, justificando a escolha do método utilizado.

C) Realize a análise bivariada dos dados. Faça uso de pelo menos 3 gráficos e traga insights acerca do analisado.
"""

#Seu código aqui

"""# 3 - Realize a terceira etapa de pré processamento dos dados.

A) Comece pela correlação, que sabemos ser uma parte importante para nosso pré processamento e análise. Plote o gráfico ou a tabela e indique as variáveis que te parecem mais "fortes" na correlação para nosso modelo.



"""

#Seu código aqui

"""
B) Durante a aula, por nossa base ser pequena e demonstrativa não realizamos a separação de treino e teste, porém para as atividades do dia dia temos que fazer, nesse exercício separe treino e teste.

Lembre-se que primeiro separamos as variaveis dependentes X e depois Y, essa etapa deixarei para vocês abaixo:"""

X = df.drop('Valor_Aluguel', axis=1) #Separando X - Todas variáveis exceto valor_aluguel
y = df['Valor_Aluguel'] #Separando Y (Apenas variavel valor_aluguel)

"""Dica: Para separar em treino e teste usamos o train_test_split, como visto nas aulas de pré modelagem."""

# Seu código aqui

"""# 3 - Treine um modelo de regressão Linear simples

A) Vamos utilizar apenas X_train e y_train para rodar um modelo de regressão linea simples e para isso usaremos apenas uma váriavel, a váriavel metragem.
"""

X = X_train[['Metragem']]  # Variável independente (características)
y = y_train  # Variável dependente (rótulo)
# se você deu um nome diferente para x train e y train, altere no código.

#Crie seu modelo aqui, usando LinearRegression e as bases de treino.

"""B) Plote o intercept_ e coef_ e monte de forma extensa a equação da reta."""

#Seu código Aqui

"""Nossa equação seria:

c) Calcule o R quadrado para o modelo de treinamento. Não esqueça de avaliar e trazer em formato de insight se esse resultado te parece bom ou não.
"""

#Seu código aqui

"""D) Plote o gráfico da reta de regressão encontrada e traga insights acerca da dispersão dos pontos e ajuste da reta."""

# Seu código aqui

"""E) Para finalizar vamos aplicar o modelo a base de teste. Essa etapa é nova, então agora vocês avaliaram como o modelo treinado se saiu com a base de testes.
Para isso altere no código abaixo o nome do seu modelo de regressão:
"""

X_test = X_test[['Metragem']]  # Variável independente (características)
y_test = y_test  # Variável dependente (rótulo)

# Usando o modelo treinado para fazer previsões sobre os dados de teste
previsoes = SEUMODELO.predict(X_test)

# Avaliando o desempenho do modelo usando métricas como o R²
r2 = SEUMODELO.score(X_test, y_test)

print("Coeficiente de Determinação (R²) nos Dados de Teste:", r2)

"""Se o valor do coeficiente de determinação (R²) para os dados de treinamento for melhor (ou seja, mais próximo de 1) do que o R² para os dados de teste, isso sugere que o modelo está superajustado aos dados de treinamento. Isso significa que o modelo pode estar se ajustando muito bem aos padrões específicos nos dados de treinamento, mas pode não generalizar bem para novos dados que não foram vistos durante o treinamento.

Por outro lado, se o R² para os dados de teste for melhor do que o R² para os dados de treinamento, isso pode ser indicativo de que o modelo está subajustado. Isso significa que o modelo não está se ajustando adequadamente aos padrões nos dados de treinamento e não está capturando a relação entre as variáveis independentes e dependentes de forma eficaz.

Idealmente, gostaríamos que o valor do R² fosse consistente entre os dados de treinamento e teste, indicando que o modelo é capaz de generalizar bem para novos dados. Se houver uma grande diferença entre os valores de R² para os dados de treinamento e teste, isso sugere que o modelo pode precisar de ajustes para melhorar sua capacidade de generalização.

F) Avalie com suas palavras o valor do r quadrado encontrado no treino e no teste.

Escreva sua resposta aqui.

# 4 - Aplicação do modelo de regressão linear multipla!

A) Vamos refazer os passos anteriores porém para regressão multipla, com todas variáveis dependentes. Comece separando a base treino e teste, dessa vez com todas variáveis para X.

Aqui é só refazer os passos do exercicio 3 porém ao invés de trazer para X apenas metragem, você deve trazer todas colunas (exceto a valor do aluguel).
"""

#seu código aqui

"""B) Faça o modelo de regressão linear multipla aplicado só a base de treino."""

#seu código aqui

"""C) Traga o valor do R quadrado e avalie o valor encontrado."""

#seu código aqui

"""D) Para finalizar aplique o modelo a base de teste e traga o r quadrado de teste.
Dica: Você pode usar os códigos do exercício anterior.
"""

#seu código aqui

"""E) Compare os r quadrados encontrados pela regressão linear e pela regressão múltipla. Qual modelo te parece melhor? Por qual motivo acredita que isso ocorreu?

Digite sua resposta aqui
"""